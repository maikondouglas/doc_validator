name: Push Gem

on:
  workflow_run:
    workflows: ["Code Quality"]
    types:
      - completed

jobs:
  publish:
    name: Build and Publish Gem
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.4.2
        bundler-cache: true

    - name: Install dependencies
      run: bundle install

    - name: Check if version exists on RubyGems
      id: check_version
      run: |
        gem build *.gemspec
        gem_name=$(ls *.gem | head -n 1)
        gem_version=$(echo $gem_name | grep -oP '\d+\.\d+\.\d+')
        if gem search "^$(basename $gem_name .gem)$" --remote | grep -q $gem_version; then
          echo "Version $gem_version already exists on RubyGems. Skipping publish."
          echo "::set-output name=version_exists::true"
        else
          echo "::set-output name=version_exists::false"
        fi

    - name: Publish to GitHub Packages
      if: steps.check_version.outputs.version_exists == 'false'
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:github: Bearer ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials
        gem build *.gemspec
        gem push --key github --host https://rubygems.pkg.github.com/${OWNER} *.gem
      env:
        GEM_HOST_API_KEY: ${{ secrets.GITHUB_TOKEN }}
        OWNER: ${{ github.repository_owner }}

    - name: Publish to RubyGems
      run: |
        echo "Ensure MFA is enabled on your RubyGems account (UI and API level)."
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:rubygems_api_key: ${RUBYGEMS_AUTH_TOKEN}\n" > $HOME/.gem/credentials
        gem build *.gemspec
        echo "Enter OTP for RubyGems:"
        read -s OTP
        gem push *.gem --otp ${OTP}
      env:
        RUBYGEMS_AUTH_TOKEN: ${{ secrets.RUBYGEMS_AUTH_TOKEN }}